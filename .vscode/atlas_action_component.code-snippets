{
  "ATLAS Action Component HPP": {
    "prefix": "atlas:action_hpp",
    "scope": "cpp",
    "body": [
      "#pragma once",
      "#include <flecs.h>",
      "#include <core/scene/components.hpp>",
      "#include <modules/action_components/requirements.hpp>",
      "",
      "class ${1:ClassName} {",
      "public:",
      "  ${1}() = delete;",
      "  ${1}(flecs::world &p_registery);",
      "",
      "  void attach_entity(flecs::entity &p_entity, flecs::world &p_registery);",
      "",
      "  void on_update();",
      "",
      "private:",
      "  atlas::requirements m_requirements;",
      "  struct ${2:action_tag} {};",
      "",
      "  flecs::world m_registery;",
      "  flecs::query<${3:atlas::transform}> m_query;",
      "};"
    ],
    "description": "Insert ATLAS action_component header"
  },
  "ATLAS Action Component CPP": {
    "prefix": "atlas:action_cpp",
    "scope": "cpp",
    "body": [
      "#include \"${1:class_name}.hpp\"",
      "#include <core/update_handlers/sync_update.hpp>",
      "",
      "${1}::${1}(flecs::world &p_registery) : m_registery(p_registery) {",
      "",
      "  m_query = p_registery.query_builder<${2:atlas::transform}>()",
      "                .with<atlas::requirements::runs>()",
      "                .second<${3:action_tag}>()",
      "                .build();",
      "",
      "  m_requirements.add<flecs::pair<atlas::requirements::runs, ${3}>>(p_registery);",
      "",
      "  // More data requirements go here:",
      "  // EX: m_requirements.add<atlas::transform>(p_registery);",
      "",
      "  atlas::sync(this, &${1}::on_update);",
      "",
      "  // Add more functions here:",
      "}",
      "",
      "void ${1}::attach_entity(flecs::entity &p_entity, flecs::world &p_registery) {",
      "  if (!m_requirements.does_exist(p_entity, p_registery,",
      "                                 p_registery.id<${3}>())) {",
      "    m_requirements.apply(p_entity);",
      "  }",
      "}",
      "",
      "void ${1}::on_update() {",
      "  m_query.each([](flecs::entity &p_entity, ${4:atlas::transform} &p_transform) {",
      "    // Actions With Data, Go Here...",
      "",
      "    /* EX:(Moves the x position 1 unit for each object attached to this action)",
      "    *  glm::vec3 position = p_transform.position;",
      "    *  position.x += 1;",
      "    *  transform.position = position;",
      "    */",
      "  });",
      "}"
    ],
    "description": "Insert ATLAS action_component implementation"
  }
}